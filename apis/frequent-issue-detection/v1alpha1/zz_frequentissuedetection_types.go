/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FrequentIssueDetectionObservation struct {

	// Detect frequent issues within applications, enabled (`true`) or disabled (`false`)
	DetectApps *bool `json:"detectApps,omitempty" tf:"detect_apps,omitempty"`

	// Detect frequent issues within infrastructure, enabled (`true`) or disabled (`false`)
	DetectInfra *bool `json:"detectInfra,omitempty" tf:"detect_infra,omitempty"`

	// Detect frequent issues within transactions and services, enabled (`true`) or disabled (`false`)
	DetectTxn *bool `json:"detectTxn,omitempty" tf:"detect_txn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FrequentIssueDetectionParameters struct {

	// Detect frequent issues within applications, enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	DetectApps *bool `json:"detectApps,omitempty" tf:"detect_apps,omitempty"`

	// Detect frequent issues within infrastructure, enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	DetectInfra *bool `json:"detectInfra,omitempty" tf:"detect_infra,omitempty"`

	// Detect frequent issues within transactions and services, enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	DetectTxn *bool `json:"detectTxn,omitempty" tf:"detect_txn,omitempty"`
}

// FrequentIssueDetectionSpec defines the desired state of FrequentIssueDetection
type FrequentIssueDetectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FrequentIssueDetectionParameters `json:"forProvider"`
}

// FrequentIssueDetectionStatus defines the observed state of FrequentIssueDetection.
type FrequentIssueDetectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FrequentIssueDetectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FrequentIssueDetection is the Schema for the FrequentIssueDetections API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type FrequentIssueDetection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.detectApps)",message="detectApps is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.detectInfra)",message="detectInfra is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.detectTxn)",message="detectTxn is a required parameter"
	Spec   FrequentIssueDetectionSpec   `json:"spec"`
	Status FrequentIssueDetectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FrequentIssueDetectionList contains a list of FrequentIssueDetections
type FrequentIssueDetectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FrequentIssueDetection `json:"items"`
}

// Repository type metadata.
var (
	FrequentIssueDetection_Kind             = "FrequentIssueDetection"
	FrequentIssueDetection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FrequentIssueDetection_Kind}.String()
	FrequentIssueDetection_KindAPIVersion   = FrequentIssueDetection_Kind + "." + CRDGroupVersion.String()
	FrequentIssueDetection_GroupVersionKind = CRDGroupVersion.WithKind(FrequentIssueDetection_Kind)
)

func init() {
	SchemeBuilder.Register(&FrequentIssueDetection{}, &FrequentIssueDetectionList{})
}
